@startuml
title
    Keyple 2.0 - keyple-java-plugin-api - 2.0 (25/02/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

package "org.eclipse.keyple.core.plugin" as api {
    +class "**final** PluginApiProperties" as ApiProperties {
        +{static} **final** String VERSION
    }
    +interface AutonomousObservablePluginManager {
        +void onReaderConnected (Set<ReaderSpi> readers)
        +void onReaderDisconnected (Set<String> readersNames)
    }
    +interface WaitForCardInsertionAutonomousReaderManager {
        +void onCardInserted ()
    }
    +interface WaitForCardRemovalAutonomousReaderManager {
        +void onCardRemoved ()
    }
    +class "<<Exception>>\n**final** ReaderIOException" as ReaderIOException {
        +ReaderIOException (String message)
        +ReaderIOException (String message,
            \tThrowable cause)
    }
    +class "<<Exception>>\n**final** CardIOException" as CardIOException {
        +CardIOException (String message)
        +CardIOException (String message,
            \tThrowable cause)
    }
    +class "<<Exception>>\n**final** TaskCanceledException" as TaskCanceledException {
        +TaskCanceledException (String message)
    }
    package spi {
        together {
            +interface PoolPluginFactorySpi {
                +String getPluginApiVersion ()
                +String getCommonsApiVersion ()
                +String getPoolPluginName ()
                +PoolPluginSpi getPoolPlugin ()
            }
            +interface PluginFactorySpi {
                +String getPluginApiVersion ()
                +String getCommonsApiVersion ()
                +String getPluginName ()
                +PluginSpi getPlugin ()
            }
            +interface PoolPluginSpi {
                +String getName ()
                +SortedSet<String> getReaderGroupReferences ()
                +ReaderSpi allocateReader (String readerGroupReference)
                +void releaseReader (ReaderSpi readerSpi)
            }
            +interface PluginSpi {
                +String getName ()
                +Set<ReaderSpi> searchAvailableReaders ()
            }
        }
        +interface ObservablePluginSpi extends PluginSpi {
            --
            +int getMonitoringCycleDuration ()
            ..
            +Set<String> searchAvailableReadersNames ()
            +ReaderSpi searchReader (String readerName)
            ..
            +PluginObservationExceptionHandlerSpi getPluginObservationExceptionHandler ()
        }
        +interface AutonomousObservablePluginSpi extends PluginSpi {
            +void setManager (AutonomousObservablePluginManager manager)
        }
        +interface PluginObservationExceptionHandlerSpi {
            +void onPluginObservationError (String pluginName,
                \tThrowable e)
        }
        package reader {
            +interface ReaderSpi {
                --
                +String getName ()
                ..
                +boolean isProtocolSupported (String readerProtocol)
                +void activateProtocol (String readerProtocol)
                +void deactivateProtocol (String readerProtocol)
                +boolean isCurrentProtocol (String readerProtocol)
                ..
                +void openPhysicalChannel ()
                +void closePhysicalChannel ()
                +boolean isPhysicalChannelOpen ()
                ..
                +boolean checkCardPresence ()
                ..
                +byte[] getATR ()
                ..
                +byte[] transmitApdu (byte[] apduIn)
                ..
                +boolean isContactless ()
            }
            +interface AutonomousSelectionReaderSpi {
                +byte[] openChannelForAid (byte[] dfName,
                    \tbyte isoControlMask)
                +void closeLogicalChannel ()
            }
            package observable {
                +interface ObservableReaderSpi extends ReaderSpi {
                    --
                    +void onStartDetection ()
                    +void onStopDetection ()
                    ..
                    +ReaderObservationExceptionHandlerSpi getReaderObservationExceptionHandler ()
                }
                +interface ReaderObservationExceptionHandlerSpi {
                    +void onReaderObservationError (String pluginName,
                        \tString readerName, Throwable e)
                }
                package states {
                    package processing {
                        +interface WaitForCardRemovalDuringProcessingSpi {
                        }
                        +interface DontWaitForCardRemovalDuringProcessingSpi {
                        }
                    }
                    package insertion {
                        +interface WaitForCardInsertionAutonomousSpi {
                            +void setManager (
                                \tWaitForCardInsertionAutonomousReaderManager manager)
                        }
                        +interface WaitForCardInsertionBlockingSpi {
                            +void waitForCardPresent ()
                            +void stopWaitForCard ()
                        }
                        +interface WaitForCardInsertionNonBlockingSpi {
                        }
                    }
                    package removal {
                        +interface WaitForCardRemovalAutonomousSpi {
                            +void setManager (
                                \tWaitForCardRemovalAutonomousReaderManager manager)
                        }
                        +interface WaitForCardRemovalBlockingSpi {
                            +void waitForCardAbsentNative ()
                            +void stopWaitForCardRemoval ()
                        }
                        +interface WaitForCardRemovalNonBlockingSpi {
                        }
                    }
                }
            }
        }
    }
}

' Associations

PluginFactorySpi .up.> ApiProperties #C_USE : provide\nAPI version <
PluginFactorySpi ..> PluginSpi #C_USE : provide >

PluginSpi ..> ReaderSpi #C_USE : provide >

PoolPluginFactorySpi .up.> ApiProperties #C_USE : provide\nAPI version <
PoolPluginFactorySpi ..> PoolPluginSpi #C_USE : provide >

PoolPluginSpi ..> ReaderSpi #C_USE : provide >

ObservablePluginSpi ..> PluginObservationExceptionHandlerSpi #C_USE : provide >

AutonomousObservablePluginSpi .up.> AutonomousObservablePluginManager #C_USE : use >

ObservableReaderSpi .left.> ReaderObservationExceptionHandlerSpi #C_USE : provide >

WaitForCardInsertionAutonomousSpi ..> WaitForCardInsertionAutonomousReaderManager #C_USE : use >

WaitForCardRemovalAutonomousSpi ..> WaitForCardRemovalAutonomousReaderManager #C_USE : use >

' == LAYOUT ==

PluginObservationExceptionHandlerSpi -[hidden]- reader

ObservableReaderSpi -[hidden]- states

WaitForCardInsertionBlockingSpi -[hidden]- WaitForCardInsertionNonBlockingSpi
WaitForCardInsertionNonBlockingSpi -[hidden]- WaitForCardInsertionAutonomousSpi

WaitForCardRemovalDuringProcessingSpi -[hidden]- DontWaitForCardRemovalDuringProcessingSpi

WaitForCardRemovalBlockingSpi -[hidden]- WaitForCardRemovalNonBlockingSpi
WaitForCardRemovalNonBlockingSpi -[hidden]- WaitForCardRemovalAutonomousSpi

' == STYLE ==

package api #C_GREY1 {}
package spi #C_GREY2 {}
package reader #C_GREY3 {}
package observable #C_GREY4 {}
package states #C_GREY5 {}
package insertion #C_GREY6 {}
package processing #C_GREY6 {}
package removal #C_GREY6 {}

@enduml