@startuml
title
        Keyple 2.0 - keyple-java-card-api - 2.0 (15/03/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * __External public API references__ :
    ** <back:cyan>**keyple-java-commons-api**</back>
end legend

package "org.eclipse.keyple.core.card" as api {
    +class "**final** CardApiProperties" as ApiProperties {
        +{static} **final** String VERSION
    }
    +interface ProxyReader {
        --
        +CardResponse transmitCardRequest (
        \tCardRequest cardRequest,
        \tChannelControl channelControl)
        ..
        +void releaseChannel ()
    }
    ' REQUEST
    together {
        +enum MultiSelectionProcessing {
            FIRST_MATCH
            PROCESS_ALL
        }
        +enum ChannelControl {
            KEEP_OPEN
            CLOSE_AFTER
        }
        +class "**final** CardSelectionRequest" as CardSelectionRequest {
            --
            +CardSelectionRequest (<back:cyan>KeypleCardSelector</back> cardSelector)
            +CardSelectionRequest (<back:cyan>KeypleCardSelector</back> cardSelector,
                \tCardRequest cardRequest)
            ..
            +<back:cyan>KeypleCardSelector</back> getCardSelector ()
            +CardRequest getCardRequest ()
        }
        +class "**final** CardRequest" as CardRequest {
            --
            +CardRequest (List<ApduRequest> apduRequests, boolean isStatusCodesVerificationEnabled)
            ..
            +List<ApduRequest> getApduRequests ()
            +boolean isStatusCodesVerificationEnabled ()
        }
        +class "**final** ApduRequest" as ApduRequest {
            --
            +ApduRequest (byte[] bytes, boolean isCase4)
            +ApduRequest (byte cla, byte instruction, byte p1, byte p2, byte[] dataIn, Byte le)
            ..
            +ApduRequest setSuccessfulStatusCodes (Set<Integer> successfulStatusCodes)
            +Set<Integer> getSuccessfulStatusCodes ()
            ..
            +ApduRequest setName (String name)
            +String getName ()
            ..
            +byte[] getBytes ()
            ..
            +boolean isCase4 ()
        }
        +class "**final** CardSelectionScenario" as CardSelectionScenario {
            --
            +CardSelectionScenario (
                \tList<CardSelectionRequest> cardSelectionRequests,
                \tMultiSelectionProcessing multiSelectionProcessing,
                \tChannelControl channelControl)
            ..
            +MultiSelectionProcessing getMultiSelectionProcessing ()
            +ChannelControl getChannelControl ()
            +List<CardSelectionRequest> getCardSelectionRequests ()
        }
    }
    ' RESPONSE
    together {
        +class "<<<back:cyan>KeypleCardSelectionResponse</back>>>\n**final** CardSelectionResponse" as CardSelectionResponse {
            --
            +CardSelectionResponse (SelectionStatus selectionStatus, CardResponse cardResponse)
            ..
            +SelectionStatus getSelectionStatus ()
            +CardResponse getCardResponse ()
        }
        +class "<<Serializable>>\n**final** CardResponse" as CardResponse {
            --
            +CardResponse (List<ApduResponse> apduResponses,
                \tboolean isLogicalChannelOpen,
                \tboolean isComplete)
            ..
            +List<ApduResponse> getApduResponses ()
            ..
            +boolean isLogicalChannelOpen ()
            +boolean isComplete ()
        }
        +class "<<Serializable>>\n**final** ApduResponse" as ApduResponse {
            --
            +ApduResponse (byte[] bytes)
            ..
            +byte[] getBytes ()
            +byte[] getDataOut ()
            +int getStatusCode ()
        }
        +class SelectionStatus {
            --
            +SelectionStatus (
                \tAnswerToReset atr,
                \tApduResponse fci,
                \tboolean isMatching)
            ..
            +AnswerToReset getAtr ()
            +ApduResponse getFci ()
            +boolean hasMatched ()
        }
        +class AnswerToReset {
            --
            +AnswerToReset (byte[] atrBytes)
            ..
            +byte[] getBytes ()
        }
    }
    ' SPI
    package spi {
        +interface CardExtensionSpi {
            +String getCardApiVersion ()
            +String getServiceApiVersion ()
            +String getCommonsApiVersion ()
        }
        +interface CardSelectionSpi {
            +CardSelectionRequest getCardSelectionRequest ()
            +SmartCardSpi parse (CardSelectionResponse cardSelectionResponse)
        }
        +interface SmartCardSpi {
        }
    }
    +abstract class "<<Exception>>\nAbstractCommunicationException" as AbstractCommunicationException {
        --
        #AbstractCommunicationException (
            \tCardResponse cardResponse,
            \tString message)
        #AbstractCommunicationException (
            \tCardResponse cardResponse,
            \tString message, Throwable cause)
        ..
        +CardResponse getCardResponse ()
    }
    +class "**final** ReaderCommunicationException" as ReaderCommunicationException extends AbstractCommunicationException {
        --
        +ReaderCommunicationException (CardResponse cardResponse, String message)
        +ReaderCommunicationException (CardResponse cardResponse, String message, Throwable cause)
    }
    +class "**final** CardCommunicationException" as CardCommunicationException extends AbstractCommunicationException {
        --
        +CardCommunicationException (CardResponse cardResponse, String message)
        +CardCommunicationException (CardResponse cardResponse, String message, Throwable cause)
    }
}

' Associations

CardExtensionSpi ..> ApiProperties #C_USE : provide\nAPI version >

CardSelectionScenario *-- "1..N" CardSelectionRequest #C_LINK
CardSelectionScenario *-- "1" MultiSelectionProcessing #C_LINK
CardSelectionScenario *-- "1" ChannelControl #C_LINK

CardSelectionRequest *-- "0..1" CardRequest #C_LINK

CardRequest *-- "1..N" ApduRequest #C_LINK

CardSelectionResponse *-- "1" CardResponse #C_LINK
CardSelectionResponse *-- "1" SelectionStatus #C_LINK

CardResponse *-- "1..N" ApduResponse #C_LINK

SelectionStatus *-- "0..1" ApduResponse  #C_LINK
SelectionStatus *-- "0..1" AnswerToReset  #C_LINK

AbstractCommunicationException *-up- "0..1" CardResponse #C_LINK

ProxyReader -left-> CardSelectionRequest #C_USE : use >
ProxyReader --> CardRequest #C_USE : use >
ProxyReader -up-> MultiSelectionProcessing #C_USE : use >
ProxyReader -up-> ChannelControl #C_USE : use >

ProxyReader -up-> CardSelectionResponse #C_USE : provide >
ProxyReader -> CardResponse #C_USE : provide >
ProxyReader --> AbstractCommunicationException #C_USE : throw >

' == LAYOUT ==

spi -[hidden]- CardSelectionScenario
spi -[hidden]- CardSelectionResponse

' == STYLE ==

package api #C_GREY1 {}
package spi #C_GREY2 {}

class CardSelectionScenario <<green>>
class CardSelectionRequest <<green>>
enum MultiSelectionProcessing <<green>>
enum ChannelControl <<green>>
class CardRequest <<green>>
class ApduRequest <<green>>

class CardSelectionResponse <<purple>>
class CardResponse <<purple>>
class ApduResponse <<purple>>
class SelectionStatus <<purple>>
class AnswerToReset <<purple>>
abstract class AbstractCommunicationException <<purple>>
class ReaderCommunicationException <<purple>>
class CardCommunicationException <<purple>>

@enduml