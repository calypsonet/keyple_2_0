@startuml
title
        Calypsonet - calypsonet-java-card-api - 1.0 (20/05/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

package "org.calypsonet.terminal.card" as api {
    +class "**final** CardApiProperties" as ApiProperties {
        +{static} **final** String VERSION
    }
    +interface ProxyReader {
        --
        +CardResponse transmitCardRequest (
        \tCardRequest cardRequest,
        \tChannelControl channelControl)
        ..
        +void releaseChannel ()
    }
    ' REQUEST
    together {
        +enum ChannelControl {
            KEEP_OPEN
            CLOSE_AFTER
        }
        +class "**final** CardSelectionRequest" as CardSelectionRequest {
            --
            +CardSelectionRequest (CardSelectorSpi cardSelector)
            +CardSelectionRequest (CardSelectorSpi cardSelector, CardRequest cardRequest)
            ..
            +CardSelectorSpi getCardSelector ()
            +CardRequest getCardRequest ()
        }
        +class "**final** CardRequest" as CardRequest {
            --
            +CardRequest (List<ApduRequest> apduRequests, boolean isStatusCodesVerificationEnabled)
            ..
            +List<ApduRequest> getApduRequests ()
            +boolean isStatusCodesVerificationEnabled ()
        }
        +class "**final** ApduRequest" as ApduRequest {
            --
            +ApduRequest (byte[] bytes)
            ..
            +ApduRequest addSuccessfulStatusCode (int successfulStatusCode)
            +Set<Integer> getSuccessfulStatusCodes ()
            ..
            +ApduRequest setName (String name)
            +String getName ()
            ..
            +byte[] getBytes ()
        }
    }
    ' RESPONSE
    together {
        +class "**final** CardSelectionResponse" as CardSelectionResponse {
            --
            +CardSelectionResponse (SelectionStatus selectionStatus, CardResponse cardResponse)
            ..
            +SelectionStatus getSelectionStatus ()
            +CardResponse getCardResponse ()
        }
        +class "<<Serializable>>\n**final** CardResponse" as CardResponse {
            --
            +CardResponse (List<ApduResponse> apduResponses,
                \tboolean isLogicalChannelOpen,
                \tboolean isComplete)
            ..
            +List<ApduResponse> getApduResponses ()
            ..
            +boolean isLogicalChannelOpen ()
            +boolean isComplete ()
        }
        +class "<<Serializable>>\n**final** ApduResponse" as ApduResponse {
            --
            +ApduResponse (byte[] bytes)
            ..
            +byte[] getBytes ()
            +byte[] getDataOut ()
            +int getStatusCode ()
        }
        +class SelectionStatus {
            --
            +SelectionStatus (
                \tAnswerToReset atr,
                \tApduResponse fci,
                \tboolean isMatching)
            ..
            +AnswerToReset getAtr ()
            +ApduResponse getFci ()
            +boolean hasMatched ()
        }
        +class AnswerToReset {
            --
            +AnswerToReset (byte[] atrBytes)
            ..
            +byte[] getBytes ()
        }
    }
    ' SPI
    package spi {
        +interface CardSelectionSpi {
            +CardSelectionRequest getCardSelectionRequest ()
            +SmartCardSpi parse (CardSelectionResponse cardSelectionResponse)
        }
        +interface CardSelectorSpi {
        }
        +interface SmartCardSpi {
        }
    }
    +abstract class "<<Exception>>\nAbstractApduException" as AbstractApduException {
        --
        #AbstractApduException (
            \tCardResponse cardResponse,
            \tString message)
        #AbstractApduException (
            \tCardResponse cardResponse,
            \tString message, Throwable cause)
        ..
        +CardResponse getCardResponse ()
    }
    +class ReaderBrokenCommunicationException extends AbstractApduException {
        --
        +ReaderBrokenCommunicationException (CardResponse cardResponse, String message)
        +ReaderBrokenCommunicationException (CardResponse cardResponse, String message,
            \tThrowable cause)
    }
    +class CardBrokenCommunicationException extends AbstractApduException {
        --
        +CardBrokenCommunicationException (CardResponse cardResponse, String message)
        +CardBrokenCommunicationException (CardResponse cardResponse, String message,
            \tThrowable cause)
    }
    +class UnexpectedStatusCodeException extends AbstractApduException {
        --
        +UnexpectedStatusCodeException (CardResponse cardResponse, String message)
        +UnexpectedStatusCodeException (CardResponse cardResponse, String message,
            \tThrowable cause)
    }
}

' Associations

CardSelectionSpi .right.> SmartCardSpi #C_USE : provide >
CardSelectionSpi ..> CardSelectionRequest #C_USE : provide >
CardSelectionSpi ..> CardSelectionResponse #C_USE : use >

CardSelectionRequest *-up- "1" CardSelectorSpi #C_LINK
CardSelectionRequest *-- "0..1" CardRequest #C_LINK

CardRequest *-- "1..N" ApduRequest #C_LINK

CardSelectionResponse *-- "1" CardResponse #C_LINK
CardSelectionResponse *-- "1" SelectionStatus #C_LINK

CardResponse *-- "1..N" ApduResponse #C_LINK

SelectionStatus *-- "0..1" ApduResponse  #C_LINK
SelectionStatus *-- "0..1" AnswerToReset  #C_LINK

AbstractApduException *-up- "0..1" CardResponse #C_LINK

ProxyReader .left.> CardSelectionRequest #C_USE : use >
ProxyReader ..> CardRequest #C_USE : use >
ProxyReader .up.> ChannelControl #C_USE : use >

ProxyReader .up.> CardSelectionResponse #C_USE : provide >
ProxyReader .> CardResponse #C_USE : provide >
ProxyReader ..> AbstractApduException #C_USE : throw >

' == LAYOUT ==

spi -[hidden]- CardSelectionRequest
spi -[hidden]- CardSelectionResponse

' == STYLE ==

package api #C_GREY1 {}
package spi #C_GREY2 {}

class CardSelectionRequest <<green>>
enum ChannelControl <<green>>
class CardRequest <<green>>
class ApduRequest <<green>>

class CardSelectionResponse <<purple>>
class CardResponse <<purple>>
class ApduResponse <<purple>>
class SelectionStatus <<purple>>
class AnswerToReset <<purple>>
abstract class AbstractApduException <<purple>>
class ReaderBrokenCommunicationException <<purple>>
class CardBrokenCommunicationException <<purple>>
class UnexpectedStatusCodeException <<purple>>

@enduml