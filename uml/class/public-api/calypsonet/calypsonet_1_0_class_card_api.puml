@startuml
title
        Calypsonet - calypsonet-terminal-card-java-api - 1.0 (21/05/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

package "org.calypsonet.terminal.card" as api {
    ' SPI
    package spi {
        +interface CardSelectionSpi {
            +CardSelectionRequestSpi getCardSelectionRequest ()
            +SmartCardSpi parse (CardSelectionResponseApi cardSelectionResponseApi)
        }
        +interface CardSelectorSpi {
        }
        +interface SmartCardSpi {
        }
        ' REQUEST
        together {
            +interface CardSelectionRequestSpi {
                +CardSelectorSpi getCardSelector ()
                +CardRequestSpi getCardRequest ()
            }
            +interface CardRequestSpi {
                +List<ApduRequestSpi> getApduRequests ()
                +boolean isStatusWordVerificationEnabled ()
            }
            +interface ApduRequestSpi {
                +String getName ()
                +byte[] getBytes ()
                +Set<Integer> getSuccessfulStatusWords ()
            }
        }
    }
    +interface ProxyReaderApi {
        --
        +CardResponseApi transmitCardRequest (
        \tCardRequestSpi cardRequest,
        \tChannelControl channelControl)
        ..
        +void releaseChannel ()
    }
    +enum ChannelControl {
        KEEP_OPEN
        CLOSE_AFTER
    }
    ' RESPONSE
    together {
        +class "**final** CardApiProperties" as ApiProperties {
            +{static} **final** String VERSION
        }
        +interface CardSelectionResponseApi {
            +SelectionStatusApi getSelectionStatus ()
            +CardResponseApi getCardResponse ()
        }
        +interface "<<Serializable>>\nCardResponseApi" as CardResponseApi {
            +List<ApduResponseApi> getApduResponses ()
            +boolean isLogicalChannelOpen ()
            +boolean isComplete ()
        }
        +interface "<<Serializable>>\nApduResponseApi" as ApduResponseApi {
            +byte[] getBytes ()
            +byte[] getDataOut ()
            +int getStatusWord ()
        }
        +interface SelectionStatusApi {
            +byte[] getPowerOnData ()
            +ApduResponseApi getFci ()
            +boolean hasMatched ()
        }
    }
    +abstract class "<<Exception>>\nAbstractApduException" as AbstractApduException {
        --
        #AbstractApduException (
            \tCardResponseApi cardResponseApi,
            \tString message)
        #AbstractApduException (
            \tCardResponseApi cardResponseApi,
            \tString message, Throwable cause)
        ..
        +CardResponseApi getCardResponse ()
    }
    +class ReaderBrokenCommunicationException extends AbstractApduException {
        --
        +ReaderBrokenCommunicationException (CardResponseApi cardResponseApi, String message)
        +ReaderBrokenCommunicationException (CardResponseApi cardResponseApi, String message,
            \tThrowable cause)
    }
    +class CardBrokenCommunicationException extends AbstractApduException {
        --
        +CardBrokenCommunicationException (CardResponseApi cardResponseApi, String message)
        +CardBrokenCommunicationException (CardResponseApi cardResponseApi, String message,
            \tThrowable cause)
    }
    +class UnexpectedStatusWordException extends AbstractApduException {
        --
        +UnexpectedStatusWordException (CardResponseApi cardResponseApi, String message)
        +UnexpectedStatusWordException (CardResponseApi cardResponseApi, String message,
            \tThrowable cause)
    }
}

' Associations

CardSelectionSpi .left.> SmartCardSpi #C_USE : provide >
CardSelectionSpi ..> CardSelectionRequestSpi #C_USE : provide >
CardSelectionSpi ..> CardSelectionResponseApi #C_USE : use >

CardSelectionRequestSpi .left.> CardSelectorSpi #C_USE : provide >
CardSelectionRequestSpi ..> CardRequestSpi #C_USE : provide >

CardRequestSpi ..> ApduRequestSpi #C_USE : provide >

CardSelectionResponseApi ..> CardResponseApi #C_USE : provide >
CardSelectionResponseApi ..> SelectionStatusApi #C_USE : provide >

CardResponseApi ..> ApduResponseApi #C_USE : provide >

SelectionStatusApi ..> ApduResponseApi #C_USE : provide >

AbstractApduException *-up- "0..1" CardResponseApi #C_LINK

ProxyReaderApi .left.> CardRequestSpi #C_USE : use >
ProxyReaderApi .up.> ChannelControl #C_USE : use >

ProxyReaderApi .right.> CardResponseApi #C_USE : provide >
ProxyReaderApi ..> AbstractApduException #C_USE : throw >

' == LAYOUT ==

ApiProperties -[hidden]left- CardSelectionResponseApi
spi -[hidden]- CardSelectionResponseApi

' == STYLE ==

package api #C_GREY1 {}
package spi #C_GREY2 {}

interface CardSelectionResponseApi <<purple>>
interface CardResponseApi <<purple>>
interface ApduResponseApi <<purple>>
interface SelectionStatusApi <<purple>>
abstract class AbstractApduException <<purple>>
class ReaderBrokenCommunicationException <<purple>>
class CardBrokenCommunicationException <<purple>>
class UnexpectedStatusWordException <<purple>>

@enduml