@startuml
title
    Calypsonet - calypsonet-terminal-calypso-java-api - 1.0 (02/06/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * __External public API references__ :
    ** <back:yellow>**calypsonet-terminal-reader-java-api**</back>
end legend

package "org.calypsonet.terminal.calypso" as api {

    +class "**final** CalypsoApiProperties" as ApiProperties {
        +{static} **final** String VERSION
    }
    +enum SessionAccessLevel {
        SESSION_LVL_PERSO
        SESSION_LVL_LOAD
        SESSION_LVL_DEBIT
        ..
        +byte getSessionKey ()
    }
    +enum SelectFileControl {
        FIRST_EF
        NEXT_EF
        CURRENT_DF
    }

    package card {
        +interface "<<<back:yellow>CardSelection</back>>>\nCalypsoCardSelection" as CalypsoCardSelection {
            --
            +CalypsoCardSelection prepareSelectFile (byte[] lid)
            +CalypsoCardSelection prepareSelectFile (short lid)
            +CalypsoCardSelection prepareSelectFile (SelectFileControl selectControl)
            ..
            +CalypsoCardSelection prepareReadRecordFile (byte sfi, int recordNumber)
        }
        +interface "<<<back:yellow>SmartCard</back>>>\nCalypsoCard" as CalypsoCard {
            --
            +ProductType getProductType ()
            +String getPowerOnDataHex ()
            +byte[] getDfNameBytes ()
            +String getDfNameHex ()
            +byte[] getApplicationSerialNumberBytes ()
            +String getApplicationSerialNumberHex ()
            ..
            +String getStartupInfoHex ()
            +byte getPlatform ()
            +byte getApplicationType ()
            +byte getApplicationSubtype ()
            +byte getSoftwareIssuer ()
            +byte getSoftwareVersion ()
            +byte getSoftwareRevision ()
            +byte getSessionModification ()
            ..
            +boolean isConfidentialSessionModeSupported ()
            +boolean isDeselectRatificationSupported ()
            +boolean isPublicAuthenticationSupported ()
            ..
            +DirectoryHeader getDirectoryHeader ()
            +ElementaryFile getFileBySfi (byte sfi)
            +ElementaryFile getFileByLid (short lid)
            +Map<Byte, ElementaryFile> getAllFiles ()
            ..
            +boolean isDfInvalidated ()
            +boolean isDfRatified ()
            ..
            +boolean isPinFeatureAvailable ()
            +boolean isPinBlocked ()
            +int getPinAttemptRemaining ()
            ..
            +boolean isSvFeatureAvailable ()
            +int getSvBalance ()
            +int getSvLastTNum ()
            +SvLoadLogRecord getSvLoadLogRecord ()
            +SvDebitLogRecord getSvDebitLogLastRecord ()
            +List<SvDebitLogRecord> getSvDebitLogAllRecords ()
        }
        +interface DirectoryHeader {
            --
            +short getLid ()
            +byte getDfStatus ()
            ..
            +byte[] getAccessConditions ()
            +byte[] getKeyIndexes ()
            ..
            +boolean isKifAvailable (SessionAccessLevel level)
            +byte getKif (SessionAccessLevel level)
            ..
            +boolean isKvcAvailable (SessionAccessLevel level)
            +byte getKvc (SessionAccessLevel level)
        }
        +interface ElementaryFile {
            --
            +byte getSfi ()
            +FileHeader getHeader ()
            +FileData getData ()
        }
        +interface FileHeader {
            --
            +short getLid ()
            +byte getDfStatus ()
            +ElementaryFile.Type getEfType ()
            ..
            +int getRecordsNumber ()
            +int getRecordSize ()
            ..
            +byte[] getAccessConditions ()
            +byte[] getKeyIndexes ()
            ..
            +boolean isShared ()
            +Short getSharedReference ()
        }
        +enum "Type" as FileType {
            LINEAR
            BINARY
            CYCLIC
            COUNTERS
            SIMULATED_COUNTERS
        }
        +interface FileData {
            --
            +byte[] getContent ()
            +byte[] getContent (int numRecord)
            +byte[] getContent (int numRecord, int dataOffset, int dataLength)
            +SortedMap<Integer, byte[]> getAllRecordsContent ()
            ..
            +int getContentAsCounterValue (int numCounter)
            +SortedMap<Integer, Integer> getAllCountersValue ()
        }
        +enum "ProductType" as CardProductType {
            PRIME_REV1_0
            PRIME_REV2_4
            PRIME_REV3
            HCE
            LIGHT
            BASIC
        }
        +interface SvLoadLogRecord {
            --
            +int getAmount ()
            +int getBalance ()
            ..
            +int getLoadTime ()
            +byte[] getLoadTimeBytes ()
            +int getLoadDate ()
            +byte[] getLoadDateBytes ()
            +String getFreeByte ()
            +byte[] getFreeByteBytes ()
            ..
            +byte getKvc ()
            ..
            +long getSamId ()
            +byte[] getSamIdBytes ()
            ..
            +int getSvTNum ()
            +byte[] getSvTNumBytes ()
            ..
            +int getSamTNum ()
            +byte[] getSamTNumBytes ()
        }
        +interface SvDebitLogRecord {
            --
            +int getAmount ()
            +int getBalance ()
            ..
            +int getDebitTime ()
            +byte[] getDebitTimeBytes ()
            +int getDebitDate ()
            +byte[] getDebitDateBytes ()
            ..
            +byte getKvc ()
            ..
            +long getSamId ()
            +byte[] getSamIdBytes ()
            ..
            +int getSvTNum ()
            +byte[] getSvTNumBytes ()
            ..
            +int getSamTNum ()
            +byte[] getSamTNumBytes ()
        }
    }
    package sam {
        +interface "<<<back:yellow>SmartCard</back>>>\nCalypsoSam" as CalypsoSam {
            +ProductType getProductType ()
            +String getProductInfo ()
            +byte[] getSerialNumber ()
            +byte getPlatform ()
            +byte getApplicationType ()
            +byte getApplicationSubType ()
            +byte getSoftwareIssuer ()
            +byte getSoftwareVersion ()
            +byte getSoftwareRevision ()
        }
        +enum "ProductType" as SamProductType {
            SAM_C1
            SAM_S1E1
            SAM_S1Dx
            CSAM_F
            ..
            +String getApplicationTypeMask ()
            +byte getClassByte ()
        }
    }
    package transaction {
        +interface CardTransactionService {
            --
            +<back:yellow>CardReader</back> getCardReader ()
            +CalypsoCard getCalypsoCard ()
            +CardSecuritySetting getCardSecuritySetting ()
            +String getTransactionAuditData ()
            ..
            +CardTransactionService prepareSelectFile (byte[] lid)
            +CardTransactionService prepareSelectFile (SelectFileControl control)
            ..
            +CardTransactionService prepareReadRecordFile (byte sfi, int recordNumber)
            +CardTransactionService prepareReadRecordFile (byte sfi, int firstRecordNumber, int numberOfRecords, int recordSize)
            +CardTransactionService prepareReadCounterFile (byte sfi, int countersNumber)
            ..
            +CardTransactionService prepareCheckPinStatus ()
            ..
            +CardTransactionService prepareAppendRecord (byte sfi, byte[] recordData)
            +CardTransactionService prepareUpdateRecord (byte sfi, int recordNumber, byte[] recordData)
            +CardTransactionService prepareWriteRecord (byte sfi, int recordNumber, byte[] recordData)
            ..
            +CardTransactionService prepareIncreaseCounter (byte sfi, int counterNumber, int incValue)
            +CardTransactionService prepareDecreaseCounter (byte sfi, int counterNumber, int decValue)
            +CardTransactionService prepareSetCounter (byte sfi, int counterNumber, int newValue)
            ..
            +CardTransactionService prepareSvGet (SvOperation svOperation, SvAction svAction)
            +CardTransactionService prepareSvReload (int amount, byte[] date, byte[] time, byte[] free)
            +CardTransactionService prepareSvReload (int amount)
            +CardTransactionService prepareSvDebit (int amount, byte[] date, byte[] time)
            +CardTransactionService prepareSvDebit (int amount)
            +CardTransactionService prepareSvReadAllLogs ()
            ..
            +CardTransactionService prepareInvalidate ()
            +CardTransactionService prepareRehabilitate ()
            ..
            +CardTransactionService prepareReleaseCardChannel ()
            ..
            +CardTransactionService processCardCommands ()
            ..
            +CardTransactionService processVerifyPin (byte[] pin)
            +CardTransactionService processVerifyPin (String pin)
            ..
            +CardTransactionService processOpening (SessionAccessLevel sessionAccessLevel)
            +CardTransactionService processClosing ()
            +CardTransactionService processCancel ()
        }
        +enum SvOperation {
            RELOAD
            DEBIT
        }
        +enum SvAction {
            DO
            UNDO
        }
        +interface CardSecuritySetting {
            --
            .. setters ..
            +CardSecuritySetting enableMultipleSession ()
            +CardSecuritySetting enableRatificationMechanism ()
            +CardSecuritySetting enablePinPlainTransmission ()
            +CardSecuritySetting enableTransactionAudit ()
            +CardSecuritySetting enableSvLoadAndDebitLog ()
            +CardSecuritySetting authorizeSvNegativeBalance ()
            ..
            +CardSecuritySetting assignKif (SessionAccessLevel sessionAccessLevel, byte kif)
            +CardSecuritySetting assignKvc (SessionAccessLevel sessionAccessLevel, byte kvc)
            +CardSecuritySetting assignKeyRecordNumber (SessionAccessLevel sessionAccessLevel, byte keyRecordNumber)
            +CardSecuritySetting addAuthorizedKvc (byte authorizedKvc)
            ..
            +CardSecuritySetting setPinCipheringKey (byte kif, byte kvc)
            .. getters ..
            +<back:yellow>CardReader</back> getSamReader ()
            +CalypsoSam getCalypsoSam ()
            ..
            +boolean isMultipleSessionEnabled ()
            +boolean isRatificationMechanismEnabled ()
            +boolean isPinPlainTransmissionEnabled ()
            +boolean isTransactionAuditEnabled ()
            +boolean isSvLoadAndDebitLogEnabled ()
            +boolean isSvNegativeBalanceAuthorized ()
            ..
            +Byte getKif (SessionAccessLevel sessionAccessLevel)
            +Byte getKvc (SessionAccessLevel sessionAccessLevel)
            +Byte getKeyRecordNumber (SessionAccessLevel sessionAccessLevel)
            +boolean isKvcAuthorized (byte kvc)
            ..
            +byte getPinCipheringKif ()
            +byte getPinCipheringKvc ()
        }
    }
}

' Associations

CardTransactionService .up.> SessionAccessLevel #C_USE : use >
CardTransactionService ..> SvOperation #C_USE : use >
CardTransactionService ..> SvAction #C_USE : use >
CardTransactionService .up.> SelectFileControl #C_USE : use >
CardTransactionService ..> CalypsoCard #C_USE : provide >
CardTransactionService ..> CardSecuritySetting #C_USE : provide >

CardSecuritySetting .up.> SessionAccessLevel #C_USE : use >
CardSecuritySetting ..> CalypsoSam #C_USE : provide >

CalypsoSam +-- SamProductType
CalypsoSam ..> SamProductType #C_USE : provide >

CalypsoCardSelection .up.> SelectFileControl #C_USE : use >

CalypsoCard ..> DirectoryHeader #C_USE : provide >
CalypsoCard ..> ElementaryFile #C_USE : provide >
CalypsoCard +-- CardProductType
CalypsoCard ..> CardProductType #C_USE : provide >
CalypsoCard ..> SvLoadLogRecord #C_USE : provide >
CalypsoCard ..> SvDebitLogRecord #C_USE : provide >

DirectoryHeader ..> SessionAccessLevel #C_USE : use >

ElementaryFile +-- FileType
ElementaryFile ..> FileHeader #C_USE : provide >
ElementaryFile ..> FileData #C_USE : provide >

FileHeader ..> FileType #C_USE : provide >

' == LAYOUT ==

'ProductType -[hidden]- SamCardResourceServiceBuilder

' == STYLE ==

package api #C_GREY1 {}
package card #C_GREY2 {}
package sam #C_GREY2 {}
package transaction #C_GREY2 {}


@enduml