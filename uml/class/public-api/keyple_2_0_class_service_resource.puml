@startuml
title
    Keyple 2.0 - keyple-java-service-resource - 2.0.0 (20/05/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * __External public API references__ :
    ** <back:yellow>**calypsonet-java-reader-api**</back>
    ** <back:pink>**keyple-java-service**</back>
end legend

package "org.eclipse.keyple.core.service.resource" as resource {

    +class "**final** CardResourceProperties" as ApiProperties {
        +{static} **final** String VERSION
    }

    ' Card Resource Service
    +class "**final** CardResourceServiceProvider" as CardResourceServiceProvider {
        +{static} CardResourceService getService ()
    }

    +interface CardResourceService {
        +CardResourceServiceConfigurator getConfigurator()
        +void start ()
        +void stop ()
        +CardResource getCardResource (String cardResourceProfileName)
        +void releaseCardResource (CardResource cardResource)
        +void removeCardResource (CardResource cardResource)
    }

    +interface CardResourceServiceConfigurator {
        +CardResourceServiceConfigurator withPlugins (PluginsConfigurator pluginsConfigurator)
        +CardResourceServiceConfigurator withPoolPlugins (PoolPluginsConfigurator poolPluginsConfigurator)
        +CardResourceServiceConfigurator withCardResourceProfiles (CardResourceProfileConfigurator... cardResourceProfileConfigurators)
        +CardResourceServiceConfigurator withBlockingAllocationMode (int cycleDurationMillis, int timeoutMillis)
        +void configure ()
    }

    +class "**final** PluginsConfigurator" as PluginsConfigurator {
        +{static} Builder builder ()
    }
    +class "**final** Builder" as PluginsConfiguratorBuilder {
        --
        +Builder withAllocationStrategy (AllocationStrategy allocationStrategy)
        +Builder withUsageTimeout (int usageTimeoutMillis)
        +Builder addPlugin (<back:pink>Plugin</back> plugin, ReaderConfiguratorSpi readerConfiguratorSpi)
        +Builder addPluginWithMonitoring (<back:pink>Plugin</back> plugin, ReaderConfiguratorSpi readerConfiguratorSpi
            \t<back:pink>PluginObservationExceptionHandlerSpi</back> pluginObservationExceptionHandlerSpi,
            \t<back:yellow>CardReaderObservationExceptionHandlerSpi</back> readerObservationExceptionHandlerSpi)
        +PluginsConfigurator build ()
    }
    +enum AllocationStrategy {
        FIRST
        CYCLIC
        RANDOM
    }

    +class "**final** PoolPluginsConfigurator" as PoolPluginsConfigurator {
        +{static} Builder builder ()
    }
    +class "**final** Builder" as PoolPluginsConfiguratorBuilder {
        +Builder usePoolFirst ()
        +Builder addPoolPlugin (<back:pink>PoolPlugin</back> poolPlugin)
        +PoolPluginsConfigurator build ()
    }

    +class "**final** CardResourceProfileConfigurator" as CardResourceProfileConfigurator {
        --
        +{static} Builder builder (String profileName, CardResourceProfileExtensionSpi cardResourceProfileExtensionSpi)
    }
    +class "**final** Builder" as CardResourceProfileConfiguratorBuilder {
        +Builder withPlugins (<back:pink>Plugin</back>... plugins)
        +Builder withReaderNameRegex (String readerNameRegex)
        +Builder withReaderGroupReference (String readerGroupReference)
        +CardResourceProfileConfigurator build ()
    }

    +class "**final** CardResource" as CardResource {
        --
        +CardResource (<back:pink>Reader</back> reader, <back:yellow>SmartCard</back> smartCard)
        ..
        +<back:pink>Reader</back> getReader ()
        +<back:yellow>SmartCard</back> getSmartCard ()
    }

    package "spi" as resourceSpi {
        +interface ReaderConfiguratorSpi {
            +void setupReader (<back:pink>Reader</back> reader)
        }
        +interface CardResourceProfileExtensionSpi {
            +<back:yellow>SmartCard</back> matches (<back:pink>Reader</back> reader)
        }
    }
}

' Associations

CardResourceServiceProvider ..> CardResourceService #C_USE : provide >

CardResourceService .left.> CardResource #C_USE : provide >
CardResourceService ..> CardResourceServiceConfigurator #C_USE : provide >

CardResourceServiceConfigurator ..> CardResourceServiceConfigurator #C_USE
CardResourceServiceConfigurator ..> PluginsConfigurator #C_USE : use >
CardResourceServiceConfigurator ..> PoolPluginsConfigurator #C_USE : use >
CardResourceServiceConfigurator ..> CardResourceProfileConfigurator #C_USE : use >

PluginsConfigurator ..> PluginsConfiguratorBuilder #C_USE : provide >
PluginsConfigurator +-right- AllocationStrategy
PluginsConfigurator *-right- "1" AllocationStrategy #C_LINK

PluginsConfiguratorBuilder ..> PluginsConfiguratorBuilder #C_USE
PluginsConfiguratorBuilder .up.> AllocationStrategy #C_USE : use >
PluginsConfiguratorBuilder ..> ReaderConfiguratorSpi #C_USE : use >
PluginsConfiguratorBuilder .up.> PluginsConfigurator #C_USE : create >

PoolPluginsConfigurator ..> PoolPluginsConfiguratorBuilder #C_USE : provide >

PoolPluginsConfiguratorBuilder ..> PoolPluginsConfiguratorBuilder #C_USE
PoolPluginsConfiguratorBuilder .up.> PoolPluginsConfigurator #C_USE : create >

CardResourceProfileConfigurator ..> CardResourceProfileExtensionSpi #C_USE : use >
CardResourceProfileConfigurator ..> CardResourceProfileConfiguratorBuilder #C_USE : provide >

CardResourceProfileConfiguratorBuilder ..> CardResourceProfileConfiguratorBuilder #C_USE
CardResourceProfileConfiguratorBuilder .up.> CardResourceProfileConfigurator #C_USE : create >

' == LAYOUT ==

' == STYLE ==

package resource #C_GREY1 {}
package resourceSpi #C_GREY2 {}

@enduml