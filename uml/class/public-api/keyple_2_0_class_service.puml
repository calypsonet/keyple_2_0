@startuml
title
    Keyple 2.0 - keyple-java-service - 2.0.0 (30/04/2021)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * __External public API references__ :
    ** <back:cyan>**keyple-java-commons-api**</back>
end legend

package "org.eclipse.keyple.core.service" as service {
    ' SPI
    package spi {
        +interface PluginObserverSpi {
            +void onPluginEvent (
                \tPluginEvent pluginEvent)
        }
        +interface PluginObservationExceptionHandlerSpi {
            +void onPluginObservationError (String pluginName,
                \tThrowable e)
        }
        +interface ReaderObserverSpi {
            +void onReaderEvent (
                \tReaderEvent readerEvent)
        }
        +interface ReaderObservationExceptionHandlerSpi {
            +void onReaderObservationError (String pluginName,
                \tString readerName, Throwable e)
        }
    }
    ' SERVICE

    ' Card Resource Service
    package resource {
        +class "**final** CardResourceServiceProvider" as CardResourceServiceProvider {
            +{static} CardResourceService getService ()
        }

        +interface CardResourceService {
            +CardResourceServiceConfigurator getConfigurator()
            +void start ()
            +void stop ()
            +CardResource getCardResource (String cardResourceProfileName)
            +void releaseCardResource (CardResource cardResource)
            +void removeCardResource (CardResource cardResource)
        }

        +interface CardResourceServiceConfigurator {
            +CardResourceServiceConfigurator withPlugins (PluginsConfigurator pluginsConfigurator)
            +CardResourceServiceConfigurator withPoolPlugins (PoolPluginsConfigurator poolPluginsConfigurator)
            +CardResourceServiceConfigurator withCardResourceProfiles (CardResourceProfileConfigurator... cardResourceProfileConfigurators)
            +CardResourceServiceConfigurator withBlockingAllocationMode (int cycleDurationMillis, int timeoutMillis)
            +void configure ()
        }

        +class "**final** PluginsConfigurator" as PluginsConfigurator {
            +{static} Builder builder ()
        }
        +class "**final** Builder" as PluginsConfiguratorBuilder {
            --
            +Builder withAllocationStrategy (AllocationStrategy allocationStrategy)
            +Builder withUsageTimeout (int usageTimeoutMillis)
            +Builder addPlugin (Plugin plugin, ReaderConfiguratorSpi readerConfiguratorSpi)
            +Builder addPluginWithMonitoring (Plugin plugin, ReaderConfiguratorSpi readerConfiguratorSpi
                \tPluginObservationExceptionHandlerSpi pluginObservationExceptionHandlerSpi,
                \tReaderObservationExceptionHandlerSpi readerObservationExceptionHandlerSpi)
            +PluginsConfigurator build ()
        }
        +enum AllocationStrategy {
            FIRST
            CYCLIC
            RANDOM
        }

        +class "**final** PoolPluginsConfigurator" as PoolPluginsConfigurator {
            +{static} Builder builder ()
        }
        +class "**final** Builder" as PoolPluginsConfiguratorBuilder {
            +Builder usePoolFirst ()
            +Builder addPoolPlugin (PoolPlugin poolPlugin)
            +PoolPluginsConfigurator build ()
        }

        +class "**final** CardResourceProfileConfigurator" as CardResourceProfileConfigurator {
            --
            +{static} Builder builder (String profileName, <back:cyan>KeypleCardResourceProfileExtension</back> cardResourceProfileExtension)
        }
        +class "**final** Builder" as CardResourceProfileConfiguratorBuilder {
            +Builder withPlugins (Plugin... plugins)
            +Builder withReaderNameRegex (String readerNameRegex)
            +Builder withReaderGroupReference (String readerGroupReference)
            +CardResourceProfileConfigurator build ()
        }

        +class "**final** CardResource" as CardResource {
            --
            +CardResource (Reader reader, SmartCard smartCard)
            ..
            +Reader getReader ()
            +SmartCard getSmartCard ()
        }

        package "spi" as resourceSpi {
            +interface ReaderConfiguratorSpi {
                +void setupReader (Reader reader)
            }
        }
    }

    together {
        +class "**final** ServiceApiProperties" as ApiProperties {
            +{static} **final** String VERSION
        }
        +class "**final** SmartCardServiceProvider" as SmartCardServiceProvider {
            +{static} SmartCardService getService ()
        }
        +interface SmartCardService {
            --
            +Plugin registerPlugin (<back:cyan>KeyplePluginExtensionFactory</back> pluginFactory)
            +void unregisterPlugin (String pluginName)
            +boolean isPluginRegistered (String pluginName)
            +Plugin getPlugin (String pluginName)
            +Map<String, Plugin> getPlugins ()
            ..
            +void checkCardExtension (<back:cyan>KeypleCardExtension</back> cardExtension)
            ..
            +DistributedLocalService registerDistributedLocalService (
                \t<back:cyan>KeypleDistributedLocalServiceExtensionFactory</back> distributedLocalServiceFactory)
            +void unregisterDistributedLocalService (String distributedLocalServiceName)
            +boolean isDistributedLocalServiceRegistered (String distributedLocalServiceName)
            +void getDistributedLocalService (String distributedLocalServiceName)
        }
        +interface Plugin {
            --
            +String getName ()
            +<T extends <back:cyan>KeyplePluginExtension</back>> T getExtension (Class<T> pluginType)
            ..
            +Set<String> getReadersNames ()
            +Map<String, Reader> getReaders ()
            +Reader getReader (String readerName)
        }
        +interface DistributedLocalService {
            --
            +String getName ()
            +<T extends <back:cyan>KeypleDistributedLocalServiceExtension</back>> T getExtension (
                \tClass<T> distributedLocalServiceType)
        }
        +interface ObservablePlugin extends Plugin {
            --
            +void setEventNotificationExecutorService (
                \tExecutorService eventNotificationExecutorService)
            +void setPluginObservationExceptionHandler (
                \tPluginObservationExceptionHandlerSpi exceptionHandler)
            ..
            +void addObserver (PluginObserverSpi observer)
            +void removeObserver (PluginObserverSpi observer)
            +void clearObservers ()
            +int countObservers ()
        }
        +interface PoolPlugin extends Plugin {
            --
            +SortedSet<String> getReaderGroupReferences ()
            ..
            +Reader allocateReader (String readerGroupReference)
            +void releaseReader (Reader reader)
        }
        +interface Reader {
            --
            +String getName ()
            +<T extends <back:cyan>KeypleReaderExtension</back>> T getExtension (Class<T> readerType)
            ..
            +boolean isContactless ()
            +boolean isCardPresent ()
            ..
            +void activateProtocol (String readerProtocol, String cardProtocol)
            +void deactivateProtocol (String readerProtocol)
        }
        +interface ObservableReader extends Reader {
            --
            +void setEventNotificationExecutorService (ExecutorService eventNotificationExecutorService)
            +void setReaderObservationExceptionHandler (ReaderObservationExceptionHandlerSpi exceptionHandler)
            ..
            +void addObserver (ReaderObserverSpi observer)
            +void removeObserver (ReaderObserverSpi observer)
            +void clearObservers ()
            +int countObservers ()
            ..
            +void startCardDetection (PollingMode pollingMode)
            +void stopCardDetection ()
            +void finalizeCardProcessing ()
        }
    }
    +enum NotificationMode {
        ALWAYS
        MATCHED_ONLY
    }
    +enum PollingMode {
        REPEATING
        SINGLESHOT
    }
    +class "<<<back:cyan>KeypleReaderEvent</back>>>\n**final** ReaderEvent" as ReaderEvent {
        --
        +ReaderEvent (String pluginName, String readerName, EventType eventType,
            \tScheduledCardSelectionsResponse scheduledCardSelectionsResponse)
        ..
        +String getPluginName ()
        +String getReaderName ()
        +EventType getEventType ()
        +ScheduledCardSelectionsResponse getScheduledCardSelectionsResponse ()
    }
    +enum "EventType" as ReaderEventType {
        CARD_INSERTED
        CARD_MATCHED
        CARD_REMOVED
        UNREGISTERED
    }
    +class "<<<back:cyan>KeyplePluginEvent</back>>>\n**final** PluginEvent" as PluginEvent {
        --
        +PluginEvent (String pluginName, String readerName, EventType eventType)
        +PluginEvent (String pluginName, Set<String> readersNames, EventType eventType)
        ..
        +String getPluginName ()
        +SortedSet<String> getReadersNames ()
        +EventType getEventType ()
    }
    +enum "EventType" as PluginEventType {
        READER_CONNECTED
        READER_DISCONNECTED
        UNREGISTERED
    }
    ' SELECTION
    +class "**final** CardSelectionServiceFactory" as CardSelectionServiceFactory {
        +{static} CardSelectionService getService ()
        +{static} CardSelectionService getService (MultiSelectionProcessing multiSelectionProcessing)
    }
    package selection {
        ' Selection
        +interface CardSelectionService {
            --
            +int prepareSelection (CardSelection cardSelection)
            +void prepareReleaseChannel ()
            ..
            +CardSelectionResult processCardSelectionScenario (Reader reader)
            ..
            +void scheduleCardSelectionScenario (ObservableReader observableReader,
                \tNotificationMode notificationMode, PollingMode pollingMode)
            +CardSelectionResult parseScheduledCardSelectionsResponse (
                \tScheduledCardSelectionsResponse scheduledCardSelectionsResponse)
        }
        +enum MultiSelectionProcessing {
            FIRST_MATCH
            PROCESS_ALL
        }

        ' Card Extension SPI
        package "spi" as selectionSpi {
            +interface CardSelection {
                +CardSelector getCardSelector ()
            }
            +interface "<<<back:cyan>KeypleSmartCard</back>>>\nSmartCard" as SmartCard {
                --
                +boolean hasFci ()
                +byte[] getFciBytes ()
                ..
                +boolean hasAtr ()
                +byte[] getAtrBytes ()
            }
        }
        +class "<<<back:cyan>KeypleCardSelector</back>>>\n**final** CardSelector" as CardSelector {
            --
            +{static} Builder builder ()
            ..
            +String getCardProtocol ()
            ..
            +String getAtrRegex ()
            ..
            +byte[] getAid ()
            +FileOccurrence getFileOccurrence ()
            +FileControlInformation getFileControlInformation ()
            +Set<Integer> getSuccessfulSelectionStatusCodes ()
            ..
            +CardSelector addSuccessfulStatusCode (int statusCode)
            ..
            +boolean atrMatches (byte[] atr)
        }
        +class "**final** Builder" as CardSelectorBuilder {
            +Builder filterByCardProtocol (String cardProtocol)
            +Builder filterByAtr (String atrRegex)
            +Builder filterByDfName (byte[] aid)
            +Builder filterByDfName (String aid)
            +Builder setFileOccurrence (FileOccurrence fileOccurrence)
            +Builder setFileControlInformation (FileControlInformation fileControlInformation)
            +Builder addSuccessfulStatusCode (int statusCode)
            +CardSelector build ()
        }
        +enum FileOccurrence {
            FIRST
            LAST
            NEXT
            PREVIOUS
            +byte getIsoBitMask ()
        }
        +enum FileControlInformation {
            FCI
            FCP
            FMD
            NO_RESPONSE
            +byte getIsoBitMask ()
        }
        +interface CardSelectionResult {
            --
            +boolean hasActiveSelection ()
            +int getActiveSelectionIndex ()
            +boolean hasSelectionMatched (int selectionIndex)
            ..
            +Map<Integer, SmartCard> getSmartCards ()
            +SmartCard getSmartCard (int selectionIndex)
            +SmartCard getActiveSmartCard ()
        }
        +interface ScheduledCardSelectionsResponse {
        }
    }
    ' EXCEPTIONS
    together {
        +class "<<RuntimeException>>\nKeyplePluginException" as KeyplePluginException {
            +KeyplePluginException (
                \tString message)
            +KeyplePluginException (
                \tString message, Throwable cause)
        }
        +class "<<RuntimeException>>\nKeypleReaderCommunicationException" as KeypleReaderCommunicationException {
            +KeypleReaderCommunicationException (
                \tString message)
            +KeypleReaderCommunicationException (
                \tString message, Throwable cause)
        }
        +class "<<RuntimeException>>\nKeypleReaderProtocolNotSupportedException" as KeypleReaderProtocolNotSupportedException {
            +KeypleReaderProtocolNotSupportedException (
                \tString cardProtocol)
        }
        +class "<<RuntimeException>>\nKeypleCardCommunicationException" as KeypleCardCommunicationException {
            +KeypleCardCommunicationException (
                \tString message)
            +KeypleCardCommunicationException (
                \tString message, Throwable cause)
        }
    }
}

' Associations
'LocalServiceClient ..> RemoteServiceParameters #C_USE : use >

SmartCardServiceProvider ..> SmartCardService #C_USE : provide >

SmartCardService *-- "0..N" Plugin #C_LINK
SmartCardService *-- "0..N" DistributedLocalService #C_LINK

PluginEvent +-- PluginEventType
PluginEvent *-- "1" PluginEventType #C_LINK

ObservableReader +-- NotificationMode
ObservableReader ..> NotificationMode #C_USE : use >
ObservableReader +-- PollingMode
ObservableReader ..> PollingMode #C_USE : use >

ReaderEvent +-- ReaderEventType
ReaderEvent *-- "1" ReaderEventType #C_LINK
ReaderEvent .up.> ScheduledCardSelectionsResponse #C_USE : provide >

CardSelectionServiceFactory ..> CardSelectionService #C_USE : create >

CardSelectionService *-left- "1" MultiSelectionProcessing #C_LINK
CardSelectionService *-- "1..N" CardSelection #C_LINK

CardSelectionResult *-- "1..N" SmartCard #C_LINK

CardSelector ..> CardSelectorBuilder #C_USE : provide >
CardSelector +-- FileOccurrence
CardSelector *-- "0..1" FileOccurrence #C_LINK
CardSelector +-- FileControlInformation
CardSelector *-- "0..1" FileControlInformation #C_LINK

CardSelectorBuilder ..> CardSelectorBuilder #C_USE
CardSelectorBuilder .up.> CardSelector #C_USE : create >

CardResourceServiceProvider ..> CardResourceService #C_USE : provide >

CardResourceService .left.> CardResource #C_USE : provide >
CardResourceService ..> CardResourceServiceConfigurator #C_USE : provide >

CardResource *-- "1" Reader #C_LINK
CardResource *-- "1" SmartCard #C_LINK

CardResourceServiceConfigurator ..> CardResourceServiceConfigurator #C_USE
CardResourceServiceConfigurator ..> PluginsConfigurator #C_USE : use >
CardResourceServiceConfigurator ..> PoolPluginsConfigurator #C_USE : use >
CardResourceServiceConfigurator ..> CardResourceProfileConfigurator #C_USE : use >

PluginsConfigurator ..> PluginsConfiguratorBuilder #C_USE : provide >
PluginsConfigurator +-right- AllocationStrategy
PluginsConfigurator *-right- "1" AllocationStrategy #C_LINK

PluginsConfiguratorBuilder ..> PluginsConfiguratorBuilder #C_USE
PluginsConfiguratorBuilder .up.> AllocationStrategy #C_USE : use >
PluginsConfiguratorBuilder ..> ReaderConfiguratorSpi #C_USE : use >
PluginsConfiguratorBuilder .up.> PluginsConfigurator #C_USE : create >

PoolPluginsConfigurator ..> PoolPluginsConfiguratorBuilder #C_USE : provide >

PoolPluginsConfiguratorBuilder ..> PoolPluginsConfiguratorBuilder #C_USE
PoolPluginsConfiguratorBuilder .up.> PoolPluginsConfigurator #C_USE : create >

CardResourceProfileConfigurator ..> CardResourceProfileConfiguratorBuilder #C_USE : provide >

CardResourceProfileConfiguratorBuilder ..> CardResourceProfileConfiguratorBuilder #C_USE
CardResourceProfileConfiguratorBuilder .up.> CardResourceProfileConfigurator #C_USE : create >

Plugin ..> Reader #C_USE : provide >

CardSelectionService ..> ScheduledCardSelectionsResponse #C_USE : use >
CardSelectionService ..> Reader #C_USE : use >
CardSelectionService ..> CardSelectionResult #C_USE : provide >

ObservablePlugin ..> PluginObserverSpi #C_USE : use >
ObservablePlugin ..> PluginObservationExceptionHandlerSpi #C_USE : use >

PluginObserverSpi ..> PluginEvent #C_USE : use >

ObservableReader ..> ReaderObserverSpi #C_USE : use >
ObservableReader ..> ReaderObservationExceptionHandlerSpi #C_USE : use >

ReaderObserverSpi ..> ReaderEvent #C_USE : use >

CardSelection ..> CardSelector #C_USE : provide >

' == LAYOUT ==

FileOccurrence -[hidden]- KeyplePluginException
KeypleReaderCommunicationException -[hidden]right- KeypleCardCommunicationException

' == STYLE ==

package service #C_GREY1 {}
package spi #C_GREY2 {}
package selection #C_GREY2 {}
package selectionSpi #C_GREY3 {}
package resource #C_GREY2 {}
package resourceSpi #C_GREY3 {}

@enduml