@startuml
title
    Keyple 2.0 - Distributed APIs dependencies - 29/01/2021
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define COLOR_YELLOW D4AC0D
!define COLOR_RED E74C3C
!define COLOR_PURPLE 8E44AD
!define COLOR_BLUE 3498DB
!define COLOR_GREEN 27AE60
!define COLOR_GREY 2C3E50

!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam component {
    BorderColor #D4AC0D
    ' Red
    BackgroundColor<<red>> #FDEDEC
    BorderColor<<red>> #E74C3C
    ' Purple
    BackgroundColor<<purple>> #F4ECF7
    BorderColor<<purple>> #8E44AD
    ' blue
    BackgroundColor<<blue>> #EBF5FB
    BorderColor<<blue>> #3498DB
    ' Green
    BackgroundColor<<green>> #E9F7EF
    BorderColor<<green>> #27AE60
    ' Grey
    BackgroundColor<<grey>> #EAECEE
    BorderColor<<grey>> #2C3E50
}
skinparam interface {
    BorderColor #D4AC0D
    ' Red
    BackgroundColor<<red>> #FDEDEC
    BorderColor<<red>> #E74C3C
    ' Purple
    BackgroundColor<<purple>> #F4ECF7
    BorderColor<<purple>> #8E44AD
    ' blue
    BackgroundColor<<blue>> #EBF5FB
    BorderColor<<blue>> #3498DB
    ' Green
    BackgroundColor<<green>> #E9F7EF
    BorderColor<<green>> #27AE60
    ' Grey
    BackgroundColor<<grey>> #EAECEE
    BorderColor<<grey>> #2C3E50
}
hide <<red>> stereotype
hide <<purple>> stereotype
hide <<blue>> stereotype
hide <<green>> stereotype
hide <<grey>> stereotype

' == COMPONENTS ==

[Specific Application] as application <<blue>>
package "keyple-service" as packService {
    interface "Service API" as serviceApi
    interface "Service SPI" as serviceSpi <<blue>>
    interface "Selection SPI" as selectionSpi <<green>>
    [Adapter] as service
}
package "keyple-distributed-local" as packDistributedLocal {
    interface "Local API" as distributedLocalApi <<purple>>
    interface "Local SPI" as distributedLocalSpi <<blue>>
    [Adapter] as distributedLocal <<purple>>
}
package "keyple-distributed-network" as packDistributedNetwork {
    interface "Network API" as distributedNetworkApi <<purple>>
    interface "Network SPI" as distributedNetworkSpi <<blue>>
    [Adapter] as distributedNetwork <<purple>>
}
package "keyple-distributed-remote" as packDistributedRemote {
    interface "Remote API" as distributedRemoteApi <<purple>>
    [Adapter] as distributedRemote <<purple>>
}
package "keyple-remote-plugin-api" as packRemotePluginApi {
    interface "Remote Plugin SPI" as remotePluginSpi <<purple>>
    interface "Remote Plugin API" as remotePluginApi
}
package "keyple-local-service-api" as packLocalServiceApi {
    interface "Local Service SPI" as localServiceSpi <<purple>>
    interface "Local Service API" as localServiceApi
}

' == ASSOCIATIONS ==

application -- serviceSpi #COLOR_BLUE
application .. selectionSpi #COLOR_BLUE
application -- distributedLocalSpi #COLOR_BLUE
application -- distributedNetworkSpi #COLOR_BLUE

service -up- serviceApi #COLOR_YELLOW
service -- localServiceApi #COLOR_YELLOW
service -- remotePluginApi #COLOR_YELLOW

distributedLocal -up- distributedLocalApi #COLOR_PURPLE
distributedLocal -- localServiceSpi #COLOR_PURPLE

distributedNetwork -up- distributedNetworkApi #COLOR_PURPLE

distributedRemote -up- distributedRemoteApi #COLOR_PURPLE
distributedRemote -- remotePluginSpi #COLOR_PURPLE

' USE

application ..> serviceApi : use
application ..> distributedLocalApi : use
application ..> distributedNetworkApi : use
application ..> distributedRemoteApi : use

service .up.> serviceSpi : use
service .up.> selectionSpi : use
service ..> localServiceSpi : use
service ..> remotePluginSpi : use

distributedLocal .up.> distributedLocalSpi : use
distributedLocal ..> localServiceApi : use
distributedLocal .up.> distributedNetworkApi : use

distributedLocalApi ..> distributedNetworkApi : ref

distributedNetwork .up.> distributedNetworkSpi : use

distributedRemote .up.> distributedNetworkApi : use
distributedRemote ..> remotePluginApi : use

distributedRemoteApi ..> distributedNetworkApi : ref

' == STYLE ==

package packDistributedLocal #C_GREY1 {
}
package packDistributedNetwork #C_GREY1 {
}
package packDistributedRemote #C_GREY1 {
}
package packService #C_GREY1 {
}
package packRemotePluginApi #C_GREY1 {
}
package packLocalServiceApi #C_GREY1 {
}

@enduml